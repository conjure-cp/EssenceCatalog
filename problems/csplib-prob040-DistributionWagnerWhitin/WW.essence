language Essence 1.3

$ Problem Wagner-Whitin Distribution
$
$ Problem details available at http://www.csplib.org/Problems/prob040/

given numNodes : int(1..)

$ leaves are always first numLeaves nodes
given numLeaves : int(1..)

given numPeriods : int(1..)

$ used to provide bound to output
given maxStock : int(1..)

letting dNodes be domain int(1..numNodes)
letting dLeaves be domain int(1..numLeaves)
letting dInterior be domain int(numLeaves+1..numNodes)
letting dPeriods be domain int(1..numPeriods)

given holdingCost : function (total) dNodes --> int(0..)
given procCost : function (total) dNodes --> int(0..)

given demand :
  sequence (size numPeriods) of function (total) dLeaves --> int(0..)

$ used to determine where supply goes to
given children : function (total) dInterior --> set of dNodes

find orders :
  sequence (size numPeriods) of function (total) dNodes --> int(0..maxStock)
find stock :
  sequence (size numPeriods) of function (total) dNodes --> int(0..maxStock)

$ minimising the cost
$ holding*stock per period per node
$ plus proc if any orders were placed per period per node
minimising (
    sum t : dPeriods .
      (sum i : dNodes .
        (holdingCost(i) * stock(t)(i) + procCost(i) * toInt(orders(t)(i) > 0))
      )
  )

such that

$ non-leaf constraints - orders coming from children must be fulfilled
$ stock starts at 0
forAll i : dInterior .
  stock(1)(i) = orders(1)(i) - (sum m in children(i) . orders(1)(m)),

forAll t : int(2..numPeriods) .
  forAll i : dInterior .
    stock(t)(i) =
      stock(t-1)(i) + orders(t)(i) - (sum m in children(i) . orders(t)(m)),

$ leaf constraints - demands must be fullfilled.
$ Stock starts at 0
forAll i : dLeaves .
  stock(1)(i) = orders(1)(i) - demand(1)(i),

forAll t : int(2..numPeriods) .
  forAll i : dLeaves .
    stock(t)(i) = stock(t-1)(i) + orders(t)(i) - demand(t)(i)
